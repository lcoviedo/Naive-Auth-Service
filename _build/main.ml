(* Generated by auth_service (Wed, 22 Feb 2017 12:36:43 GMT). *)

open Lwt
let run =
OS.Main.run

let _ = Printexc.record_backtrace true

module Tcpip_stack_socket1 = Tcpip_stack_socket.Make(Console_unix)

module Conduit_mirage1 = Conduit_mirage.With_tcp(Tcpip_stack_socket1)

module Unikernel1 = Unikernel.Main(Console_unix)(Clock)(Kvro_fs_unix)
  (Cohttp_mirage.Server_with_conduit)

module Mirage_logs1 = Mirage_logs.Make(Clock)

let console_unix_01 = lazy (
  Console_unix.connect "0"
  )

let tcpv4_socket11 = lazy (
  Tcpv4_socket.connect (Key_gen.socket ())
  )

let udpv4_socket11 = lazy (
  Udpv4_socket.connect (Key_gen.socket ())
  )

let stackv4_socket1 = lazy (
  let __console_unix_01 = Lazy.force console_unix_01 in
  let __udpv4_socket11 = Lazy.force udpv4_socket11 in
  let __tcpv4_socket11 = Lazy.force tcpv4_socket11 in
  __console_unix_01 >>= function
  | `Error _e -> fail (Failure "console_unix_01")
  | `Ok _console_unix_01 ->
  __udpv4_socket11 >>= function
  | `Error _e -> fail (Failure "udpv4_socket11")
  | `Ok _udpv4_socket11 ->
  __tcpv4_socket11 >>= function
  | `Error _e -> fail (Failure "tcpv4_socket11")
  | `Ok _tcpv4_socket11 ->
  let config = { V1_LWT.name = "stackv4_socket"; console = _console_unix_01 ;
            interface = (Key_gen.interfaces ()) ; mode = () } in
Tcpip_stack_socket1.connect config _udpv4_socket11 _tcpv4_socket11
  )

let nocrypto1 = lazy (
  Nocrypto_entropy_lwt.initialize () >|= fun x -> `Ok x
  )

let tcp_conduit_connector1 = lazy (
  let __stackv4_socket1 = Lazy.force stackv4_socket1 in
  __stackv4_socket1 >>= function
  | `Error _e -> fail (Failure "stackv4_socket1")
  | `Ok _stackv4_socket1 ->
  let f = Conduit_mirage1.connect _stackv4_socket1 in return (`Ok f)

  )

let conduit11 = lazy (
  let __nocrypto1 = Lazy.force nocrypto1 in
  let __tcp_conduit_connector1 = Lazy.force tcp_conduit_connector1 in
  __nocrypto1 >>= function
  | `Error _e -> fail (Failure "nocrypto1")
  | `Ok _nocrypto1 ->
  __tcp_conduit_connector1 >>= function
  | `Error _e -> fail (Failure "tcp_conduit_connector1")
  | `Ok _tcp_conduit_connector1 ->
  Lwt.return Conduit_mirage.empty >>= _tcp_conduit_connector1 >>=
fun t -> Lwt.return (`Ok t)
  )

let argv_unix1 = lazy (
  OS.Env.argv () >>= (fun x -> Lwt.return (`Ok x))
  )

let clock1 = lazy (
  return (`Ok ())
  )

let direct11 = lazy (
  Kvro_fs_unix.connect "/home/carlos/workspace/Auth_Service/data"
  )

let http1 = lazy (
  let __conduit11 = Lazy.force conduit11 in
  __conduit11 >>= function
  | `Error _e -> fail (Failure "conduit11")
  | `Ok _conduit11 ->
  Cohttp_mirage.Server_with_conduit.connect _conduit11
  )

let key1 = lazy (
  let __argv_unix1 = Lazy.force argv_unix1 in
  __argv_unix1 >>= function
  | `Error _e -> fail (Failure "argv_unix1")
  | `Ok _argv_unix1 ->
  return (Functoria_runtime.with_argv Key_gen.runtime_keys "auth_service" _argv_unix1)
  )

let f11 = lazy (
  let __console_unix_01 = Lazy.force console_unix_01 in
  let __clock1 = Lazy.force clock1 in
  let __direct11 = Lazy.force direct11 in
  let __http1 = Lazy.force http1 in
  __console_unix_01 >>= function
  | `Error _e -> fail (Failure "console_unix_01")
  | `Ok _console_unix_01 ->
  __clock1 >>= function
  | `Error _e -> fail (Failure "clock1")
  | `Ok _clock1 ->
  __direct11 >>= function
  | `Error _e -> fail (Failure "direct11")
  | `Ok _direct11 ->
  __http1 >>= function
  | `Error _e -> fail (Failure "http1")
  | `Ok _http1 ->
  Unikernel1.start _console_unix_01 _clock1 _direct11 _http1
>>= fun t -> Lwt.return (`Ok t)
  )

let mirage_logs1 = lazy (
  let __clock1 = Lazy.force clock1 in
  __clock1 >>= function
  | `Error _e -> fail (Failure "clock1")
  | `Ok _clock1 ->
  let ring_size = None in
  let reporter = Mirage_logs1.create ?ring_size () in
  Mirage_runtime.set_level ~default:Logs.Info (Key_gen.logs ());
  Mirage_logs1.set_reporter reporter;
  Lwt.return (`Ok reporter)
  )

let mirage1 = lazy (
  let __key1 = Lazy.force key1 in
  let __mirage_logs1 = Lazy.force mirage_logs1 in
  let __f11 = Lazy.force f11 in
  __key1 >>= function
  | `Error _e -> fail (Failure "key1")
  | `Ok _key1 ->
  __mirage_logs1 >>= function
  | `Error _e -> fail (Failure "mirage_logs1")
  | `Ok _mirage_logs1 ->
  __f11 >>= function
  | `Error _e -> fail (Failure "f11")
  | `Ok _f11 ->
  Lwt.return_unit
  )

let () =
  let t =
  Lazy.force key1 >>= function
    | `Error _e -> exit 1
    | `Ok _ ->
    Lazy.force mirage_logs1 >>= function
    | `Error _e -> exit 1
    | `Ok _ ->
    Lazy.force mirage1
  in run t

